asyncapi: 3.0.0
info:
  title: Community WS API
  version: 1.0.0
  description: >
    Community websocket API
    
channels:

  ########################
  ## Chat
  ########################

  chat.get_user:
    address: 'chat.req/get_user'
    messages:
      request.EmptyBody:
        $ref: '#/components/messages/request.EmptyBody'
      response.UserGet:
        $ref: '#/components/messages/chat.response.UserGet'
  
  chat.get_available_report_actions:
    address: chat.req/get_available_report_actions
    messages:
      request.AvailableReportActionsGet:
        $ref: '#/components/messages/chat.request.AvailableReportActionsGet'
      response.AvailableReportActionsGet:
        $ref: '#/components/messages/chat.response.AvailableReportActionsGet'

  chat.report_message:
    address: chat.req/report_message
    messages:
      request.MessageReport:
        $ref: '#/components/messages/chat.request.MessageReport'
      response.MessageReport:
        $ref: '#/components/messages/chat.response.MessageReport'
  
  ### Subscribe channels

  chat.user:
    address: 'chat/user-{user_id}'
    messages:
      message.User:
        $ref: '#/components/messages/chat.message.User'

  ########################
  ## Share
  ########################

  share.get_player:
    address: 'share.req2/get_player'
    messages:
      request.EmptyBody:
        $ref: '#/components/messages/request.EmptyBody'
      response.PlayerGet:
        $ref: '#/components/messages/share.response.PlayerGet'

  share.get_external_shared_slip:
    address: 'share.req2/get_external_shared_slip'
    messages:
      request.ExternalSharedSlipGet:
        $ref: '#/components/messages/share.request.ExternalSharedSlipGet'
      response.ExternalSharedSlipGet:
        $ref: '#/components/messages/share.response.ExternalSharedSlipGet'

  ########################
  ## Analysis
  ########################
  
  analysis.get_player:
    address: 'analysis.req/get_player'
    messages:
      request.EmptyBody:
        $ref: '#/components/messages/request.EmptyBody'
      response.PlayerGet:
        $ref: '#/components/messages/analysis.response.PlayerGet'

  ########################
  ## Sport Stats
  ########################

  sport_stats.get_player:
    address: 'sport_stats.req/get_player'
    messages:
      request.EmptyBody:
        $ref: '#/components/messages/request.EmptyBody'
      response.Player:
        $ref: '#/components/messages/sport_stats.response.Player'
  
  sport_stats.accept_tc:
    address: 'sport_stats.req/accept_tc'
    messages:
      request.EmptyBody:
        $ref: '#/components/messages/request.EmptyBody'
      response.Player:
        $ref: '#/components/messages/sport_stats.response.Player'
  
  sport_stats.reject_tc:
    address: 'sport_stats.req/reject_tc'
    messages:
      request.EmptyBody:
        $ref: '#/components/messages/request.EmptyBody'
      response.Player:
        $ref: '#/components/messages/sport_stats.response.Player'

  sport_stats.get_player_stats:
    address: 'sport_stats.req/get_player_stats'
    messages:
      request.PlayerStatsGet:
        $ref: '#/components/messages/sport_stats.request.PlayerStatsGet'
      response.PlayerStatsGet:
        $ref: '#/components/messages/sport_stats.response.PlayerStatsGet'

############

operations:

  ########################
  ## Chat
  ########################

  chat.req/get_user:
    action: send
    summary: '(protected) Get the currently logged in user data'
    channel:
      $ref: '#/channels/chat.get_user'
    messages:
      - $ref: '#/channels/chat.get_user/messages/request.EmptyBody'
      - $ref: '#/channels/chat.get_user/messages/response.UserGet'
  
  chat.req/get_available_report_actions:
    action: send
    summary: 'Get the available report actions for selected message'
    channel:
      $ref: '#/channels/chat.get_available_report_actions'
    messages:
      - $ref: '#/channels/chat.get_available_report_actions/messages/request.AvailableReportActionsGet'
      - $ref: '#/channels/chat.get_available_report_actions/messages/response.AvailableReportActionsGet'

  chat.req/report_message:
    action: send
    summary: '(protected) Report the selected message'
    description: |
      If selected `category` is `0` (Ostalo), the note field in request is mandatory.

      It is optional otherwise.
    channel:
      $ref: '#/channels/chat.report_message'
    messages:
      - $ref: '#/channels/chat.report_message/messages/request.MessageReport'
      - $ref: '#/channels/chat.report_message/messages/response.MessageReport'
  
  ### Subscriptions

  chat/user-{user_id}:
    action: receive
    description: |
      Receive an update message whenever user is updated.
    channel:
      $ref: '#/channels/chat.user'

  ########################
  ## Share
  ########################

  share.req2/get_player:
    action: send
    summary: (Protected) Get the currently loggen in player data
    channel:
      $ref: '#/channels/share.get_player'
    messages:
      - $ref: '#/channels/share.get_player/messages/request.EmptyBody'
      - $ref: '#/channels/share.get_player/messages/response.PlayerGet'

  share.req2/get_external_shared_slip:
    action: send
    summary: Get slip shared by an external app. Such slips always have payment info hidden
    channel:
      $ref: '#/channels/share.get_external_shared_slip'
    messages:
      - $ref: '#/channels/share.get_external_shared_slip/messages/request.ExternalSharedSlipGet'
      - $ref: '#/channels/share.get_external_shared_slip/messages/response.ExternalSharedSlipGet'

  ########################
  ## Analysis
  ########################

  analysis.req/get_player:
    action: send
    channel:
      $ref: '#/channels/analysis.get_player'
    messages:
      - $ref: '#/channels/analysis.get_player/messages/request.EmptyBody'
      - $ref: '#/channels/analysis.get_player/messages/response.PlayerGet'

  ########################
  ## Sport Stats
  ########################

  sport_stats.req/get_player:
    action: send
    summary: (Protected) Get the currently logged in player info.
    channel:
      $ref: '#/channels/sport_stats.get_player'
    messages:
      - $ref: '#/channels/sport_stats.get_player/messages/request.EmptyBody'
      - $ref: '#/channels/sport_stats.get_player/messages/response.Player'
  
  sport_stats.req/accept_tc:
    action: send
    summary: (Protected) Accept T&C
    description: |
        Accept the T&C necessary for showing and viewing of player stats.

        Calling this API method if `showTcModal` is `true` will set it to `false`.

        For now, T&C can be accepted and rejected infinitely, at any time, without
        any penalties.
    channel:
      $ref: '#/channels/sport_stats.accept_tc'
    messages:
      - $ref: '#/channels/sport_stats.accept_tc/messages/request.EmptyBody'
      - $ref: '#/channels/sport_stats.accept_tc/messages/response.Player'

  sport_stats.req/reject_tc:
    action: send
    summary: (Protected) Reject T&C
    description: |
        Reject the T&C necessary for showing and viewing of player stats.

        Calling this API method if `showTcModal` is `true` will set it to `false`.

        For now, T&C can be accepted and rejected infinitely, at any time, without
        any penalties.
    channel:
      $ref: '#/channels/sport_stats.reject_tc'
    messages:
      - $ref: '#/channels/sport_stats.reject_tc/messages/request.EmptyBody'
      - $ref: '#/channels/sport_stats.reject_tc/messages/response.Player'

  sport_stats.req/get_player_stats:
    action: send
    summary: (Protected) Get the selected player stats, if possible
    channel:
      $ref: '#/channels/sport_stats.get_player_stats'
    messages:
      - $ref: '#/channels/sport_stats.get_player_stats/messages/request.PlayerStatsGet'
      - $ref: '#/channels/sport_stats.get_player_stats/messages/response.PlayerStatsGet'

############

components:

  messages:

    ####################
    ## Generic
    ####################

    request.EmptyBody:
      title: REQUEST
      description: 'This request has no body'

    response.EmptyBody:
      title: RESPONSE
      description: 'This response has no body'

    ####################
    ## Chat
    ####################

    chat.response.UserGet:
      title: RESPONSE
      payload:
        $ref: '#/components/schemas/chat.response.UserGet'

    chat.request.AvailableReportActionsGet:
      title: REQUEST
      payload:
        $ref: '#/components/schemas/chat.request.AvailableReportActionsGet'

    chat.response.AvailableReportActionsGet:
      title: REQUEST
      payload:
        $ref: '#/components/schemas/chat.response.AvailableReportActionsGet'
      examples:
        - name: 'Message cannot be reported'
          payload:
            report_action_availability: 1
            message_id: 'd4162e00-b6cd-41a6-8b29-d041b0dab769'
        - name: 'Message can be reported'
          payload:
            report_action_availability: 0
            message_id: 'd4162e00-b6cd-41a6-8b29-d041b0dab769'
            categories:
              - id: 4
                text: 'Neprimjerena poruka'
                is_note_mandatory: false
              - id: 3
                text: 'Å½icanje novca'
                is_note_mandatory: false
              - id: 2
                text: 'Maltretiranje/uznemiravanje'
                is_note_mandatory: false
              - id: 1
                text: 'Ostalo'
                is_note_mandatory: true

    chat.request.MessageReport:
      title: REQUEST
      payload:
        $ref: '#/components/schemas/chat.request.MessageReport'
      examples:
        - name: 'With mandatory note'
          payload:
            message_id: 'd4162e00-b6cd-41a6-8b29-d041b0dab769'
            category: 0
            note: 'short note'
        - name: 'Without optional note'
          payload:
            message_id: 'd4162e00-b6cd-41a6-8b29-d041b0dab769'
            category: 1
        - name: 'Setting optional note'
          payload:
            message_id: 'd4162e00-b6cd-41a6-8b29-d041b0dab769'
            category: 1
            note: 'some note'
    
    chat.response.MessageReport:
      title: RESPONSE
      payload:
        $ref: "#/components/schemas/chat.response.MessageReport"
    
    ### Messages

    chat.message.User:
      payload:
        $ref: '#/components/schemas/chat.model.User'

    ####################
    ## Share
    ####################

    share.response.PlayerGet:
      title: RESPONSE
      payload:
        $ref: '#/components/schemas/share.response.PlayerGet'
    

    share.request.ExternalSharedSlipGet:
      title: REQUEST
      payload:
        $ref: '#/components/schemas/share.request.ExternalSharedSlipGet'
    
    share.response.ExternalSharedSlipGet:
      title: RESPONSE
      payload:
        $ref: '#/components/schemas/share.response.ExternalSharedSlipGet'

    ## Analysis

    analysis.response.PlayerGet:
      title: RESPONSE
      payload:
        $ref: '#/components/schemas/analysis.response.PlayerGet'

    ## Sport Stats

    sport_stats.response.Player:
      title: RESPONSE
      payload:
        $ref: '#/components/schemas/sport_stats.response.Player'

    sport_stats.response.PlayerStats:
      title: RESPONSE
      payload:
        $ref: '#/components/schemas/sport_stats.response.PlayerStatsGet'
    
    sport_stats.request.PlayerStatsGet:
      title: REQUEST
      payload:
        $ref: '#/components/schemas/sport_stats.request.PlayerStatsGet'

    sport_stats.response.PlayerStatsGet:
      title: RESPONSE
      payload:
        $ref: '#/components/schemas/sport_stats.response.PlayerStatsGet'


  schemas:

    ############
    ## Chat
    ############

    ### Requests & Responses

    chat.response.UserGet:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/chat.model.User'

    chat.request.AvailableReportActionsGet:
      type: object
      additionalProperties: false
      properties:
        message_id:
          $ref: '#/components/schemas/field.uuid'

    chat.response.AvailableReportActionsGet:
      type: object
      additionalProperties: false
      properties:
        report_action_availability:
          type: integer
        message_id:
          $ref: '#/components/schemas/field.uuid'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/chat.model.AvailableCategory'
    
    chat.request.MessageReport:
      type: object
      additionalProperties: false
      properties:
        message_id:
          $ref: '#/components/schemas/field.uuid'
        category:        
          $ref: '#/components/schemas/chat.enum.ReportCategory'
        note:
          description: Required only if category is `0` (Other).
          type: string
          example: 'some short arbitrary text'
      required:
        - 'id'
        - 'category'
    
    chat.response.MessageReport:
      type: object
      additionalProperties: false
      properties:
        message_id:
          $ref: '#/components/schemas/field.uuid'
  
    ### Models

    chat.model.User:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/field.uuid'
        profile_id:
          $ref: '#/components/schemas/field.uuid'
        nickname:
          type: string
          example: 'johndoe'
        role:
          type: integer
          example: 0
        banned:
          type: boolean
          example: false
        warned:
          type: boolean
          example: false
        nick_confirmed:
          type: boolean
          example: true
        share_tc_confirmed:
          type: boolean
          example: true
        my_slips_share_tc_confirmed:
          type: boolean
          example: false
        timeout:
          $ref: '#/components/schemas/field.TimeRFC3339Nano'
        applied_penalty:
          $ref: '#/components/schemas/chat.model.UserPenalty'
    
    chat.model.UserPenalty:
      type: object
      additionalProperties: false
      properties:
        penalty:
          $ref: '#/components/schemas/chat.enum.Penalty'
        category_id:
          $ref: '#/components/schemas/chat.enum.ReportCategory'
        category_text:
          $ref: '#/components/schemas/chat.enum.CategoryText'
        duration:
          description: |
            Duration is specified in seconds, and is set only for temporary ban penalties
          type: integer
          example: 900
        expires_at:
          $ref: '#/components/schemas/field.TimeRFC3339Nano'
      required:
        - 'penalty'

    chat.model.AvailableCategory:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/chat.enum.ReportCategory'
        text:
          type: string
        is_note_mandatory:
          type: boolean
          example: true

    ## Enums

    chat.enum.Penalty:
      type: integer
      description: |
        - `1` - None
        - `2` - Warning
        - `3` - Temporary ban
        - `4` - Permanent ban
      enum:
        - 1
        - 2
        - 3
        - 4
    
    chat.enum.CategoryText:
      type: string
      enum:
        - 'Neprimjerena poruka'
        - 'Å½icanje novca'
        - 'Maltretiranje/uznemiravanje'
        - 'Ostalo'

    chat.enum.ReportCategory:
      type: integer
      description: |
        - `1` - Ostalo
        - `2` - Maltretiranje/uznemiravanje
        - `3` - Å½icanje novca
        - `4` - Neprimjerena poruka
      enum:
        - 1 # Other
        - 2 # Hate Speech
        - 3 # Asking for money
        - 4 # Verbal abuse

    chat.enum.ReportActionAvailability:
      type: integer
      description: |
        ### Enum

        - `0` - Allowed
        - `1` - Disabled
        - `2` - Disabled, user has already reported this message
      enum:
        - 0 # Allowed
        - 1 # Disabled
        - 2 # Disabled - user has already reported this message

    ###########
    ### Share
    ###########

    share.response.PlayerGet:
      type: object
      properties:
        player:
          $ref: '#/components/schemas/share.model.Player'
    
    share.request.ExternalSharedSlipGet:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/field.uuid'
    
    share.response.ExternalSharedSlipGet:
      type: object
      properties:
        sharedSlip:
          $ref: '#/components/schemas/share.model.SharedSlip'
    
    ### Analysis

    analysis.response.PlayerGet:
      type: object
      properties:
        player:
          $ref: '#/components/schemas/analysis.model.Player'

    ### Sport Stats

    sport_stats.response.Player:
      type: object
      properties:
        player:
          $ref: '#/components/schemas/sport_stats.model.Player'
        
    sport_stats.request.PlayerStatsGet:
      type: object
      properties:
        profileId:
          $ref: '#/components/schemas/field.uuid'

    sport_stats.response.PlayerStatsGet:
      type: object
      properties:
        visibility:
          $ref: '#/components/schemas/sport_stats.enum.Visibility'
        playerStats:
          $ref: '#/components/schemas/sport_stats.model.PlayerStats'


    ############
    ## Models
    ############


    ### Share

    share.model.Player:
      type: object
      additionalProperties: false
      properties:
        profileId: 
          $ref: '#/components/schemas/field.uuid'
        usrename:
          type: string
          example: 'johndoe'
        shareTcConfirmed:
          type: boolean
          example: true
        mySlipsShareTcConfirmed:
          type: boolean
          example: true
    
    share.model.SharedSlip:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/field.uuid'
        metadata:
          $ref: '#/components/schemas/share.model.Metadata'
        slip:
          type: object
        player:
          $ref: '#/components/schemas/share.model.SharedSlipPlayer'
        # stats
        createdAt:
          $ref: '#/components/schemas/field.TimeRFC3339Nano'
        filterPaymentInfo:
          type: boolean
          example: true
        visibility:
          $ref: '#/components/schemas/share.enum.SharedSlipVisibility'
        externalLink:
          type: string
        privateLink:
          type: string
        superSlip:
          $ref: '#/components/schemas/share.model.SuperSlip'
    
    share.model.Metadata:
      type: object
      properties:
        status:
          type: integer
          example: 1
        odd:
          type: number
          example: 123.4567
        type:
          type: integer
          example: 100
        statusUpdatedAt:
          $ref: '#/components/schemas/field.TimeRFC3339Nano'
        resultUpdatedAt:
          $ref: '#/components/schemas/field.TimeRFC3339Nano'

    share.model.SharedSlipPlayer:
      type: object
      properties:
        profileId:
          $ref: '#/components/schemas/field.uuid'
        username:
          type: string
          example: johndoe
    
    share.model.SuperSlip:
      type: object
      properties:
        type:
          type: integer

    ### Analysis

    analysis.model.Player:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/field.uuid'
        name:
          type: string
          example: 'johndoe'
        banned:
          type: boolean
          example: false
        publish_tc_confirmed:
          type: boolean
          example: true
    
    ### Sport Stats

    sport_stats.model.Player:
      type: object
      properties:
        profileId:
          $ref: '#/components/schemas/field.uuid'
        tcAccepted:
          type: boolean
          example: true
        showTcModal:
          type: boolean
          example: true
    
    sport_stats.model.PlayerStats:
      type: object
      properties:
        lines:
          type: integer
          example: 80
        linesWon:
          type: integer
          example: 52
        linesWinRate:
          type: integer
          example: 65
        highestLineOddsWon:
          type: number
          example: 4.55
        highestLineOddsWonSharedSlipId:
          $ref: '#/components/schemas/field.uuid'
        highestWinningSlipOdds:
          type: number
          example: 123.4567
        highestWinningSlipOddsSharedSlipId:
          $ref: '#/components/schemas/field.uuid'
        mostLinesWonOnSlip:
          type: integer
          example: 12
        mostLinesWonOnSlipSharedSlipId:
          $ref: '#/components/schemas/field.uuid'

    ############
    ## Enums
    ############

    ## Share

    share.enum.SharedSlipVisibility:
      type: integer
      enum:
        - 0 # Public
        - 4 # Private

    ## Sport Stats

    sport_stats.enum.Visibility:
      type: integer
      description: |
        ### Enum
        - `1` - The selected player has no stats
        - `2` - The viewer is forbidden from viewing the selected player
        stats
        - `3` - The selected player has stats, and it's visible
        - `4` - The selected player has stats hidden

      enum:
        - 1 # No Stats
        - 2 # Forbidden
        - 3 # Visible
        - 4 # Hidden

    ############
    ## Fields
    ############

    field.uuid:
      type: string
      description: lowercase UUIDv4 string
      format: '^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$'
      example: d4162e00-b6cd-41a6-8b29-d041b0dab769
    field.SlipId:
      type: string
      description: slip ID
      format: '^[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}$'
      example: D4162E00-B6CD-41A6-4B29-D041B0DAB769
    field.TimeRFC3339Nano:
      type: string
      description: Time and date in RFC3339 format with nanoseconds
      example: '2024-06-07T15:00:00Z'
